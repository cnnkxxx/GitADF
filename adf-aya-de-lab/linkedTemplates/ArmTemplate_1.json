{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-aya-de-lab"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_txt_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DL_Rebrickable",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "test"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_txt_output_with_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DL_Rebrickable",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_param_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().ds_param_file_name",
							"type": "Expression"
						},
						"folderPath": "output",
						"fileSystem": "test"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_copy_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_data_from_SQL_to_DataLake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_csv_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Send_Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy_data_from_SQL_to_DataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://prod-62.southeastasia.logic.azure.com:443/workflows/5950b431136f44eaa412747943099ae4/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=AYLPUQbhJkkOXFCqBRrlDDS-Sfjmfv8BZOVv3Ah-W34"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "step2C"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-10T06:36:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_get_file_name_from_source_folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_file_name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_txt_input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_file_name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_file_name').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy_file_to_destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_txt_input",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_txt_output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T10:01:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_txt_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_delete_file_size_less_than_150_B')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_output_file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_output",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach_file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_output_file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_output_file').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get_file_size",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set_var_file_name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_output_with_param",
											"type": "DatasetReference",
											"parameters": {
												"ds_param_file_name": {
													"value": "@variables('plp_var_file_name')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If_file_size_greater_than_150",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get_file_size",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get_file_size').output.size,150)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Delete_file",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ds_txt_output_with_param",
														"type": "DatasetReference",
														"parameters": {
															"ds_param_file_name": {
																"value": "@variables('plp_var_file_name')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "Set_var_file_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "plp_var_file_name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"plp_var_file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "step2C"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-09T08:41:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_txt_output_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_delete_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_file_name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_txt_output",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_file_name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_file_name').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "delete_files",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_txt_output_with_param",
											"type": "DatasetReference",
											"parameters": {
												"ds_param_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T10:01:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_txt_output')]",
				"[concat(variables('factoryId'), '/datasets/ds_txt_output_with_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_delete_files_with_last_modified_date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_file_name",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_errors",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@adddays(utcNow(),-130)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_file_name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_file_name').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "delete_files",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_csv_errors_with_param",
											"type": "DatasetReference",
											"parameters": {
												"ds_param_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-18T09:21:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_copy_file_with_last_modified_date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcNow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "utcNow()",
										"type": "Expression"
									},
									"wildcardFolderPath": "input",
									"wildcardFileName": "*.txt",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_txt_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_txt_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T10:01:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_txt_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_get_file_count_of_files_in_folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_txt_input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "file_count",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "plp_var_file_count",
							"value": {
								"value": "@length(activity('get_files').output.childItems)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "file_count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('plp_var_file_count'),5)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"plp_var_file_count": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T06:54:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/5_add_additional_column_in_csv_during_copy_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_with_additional_columns_csv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "datafactoryname",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									{
										"name": "pipelinename",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "pipelinerunid",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_csv_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_csv_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T10:01:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/6_convert_array_to_string_using_join_fun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_email",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_csv_email_input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_email').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append_Email",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "pl_var_array_email",
										"value": {
											"value": "@item().emailid",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set_var_Email_String",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pl_var_str_email",
							"value": {
								"value": "@join(variables('pl_var_array_email'),';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pl_var_array_email": {
						"type": "Array"
					},
					"pl_var_str_email": {
						"type": "String"
					}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-23T03:01:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/7_validate_file_schema_structure_before_processing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_structure_1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_email_input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Get_structure_2",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_email_input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get_structure_1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_structure_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get_structure_1').output.structure,activity('Get_structure_2').output.structure)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-23T06:25:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/8_get_last_modified_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_FileData",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_txt_input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get_FileData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get_FileData').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get_LastModifiedDate",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_csv_input_with_param",
											"type": "DatasetReference",
											"parameters": {
												"ds_param_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get_LastModifiedDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(\n    formatDateTime(activity('Get_LastModifiedDate').output.lastModified,'yyyyMMddHHmmss'), \n    formatDateTime(variables('pl_param_last_modified_date'),'yyyyMMddHHmmss')\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "pl_param_last_file_name",
													"value": {
														"value": "@activity('Get_LastModifiedDate').output.itemName",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable2",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set variable1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "pl_param_last_modified_date",
													"value": {
														"value": "@activity('Get_LastModifiedDate').output.lastModified",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_csv_input_with_param",
								"type": "DatasetReference",
								"parameters": {
									"ds_param_file_name": {
										"value": "@variables('pl_param_last_file_name')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_csv_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pl_param_last_file_name": {
						"type": "String"
					},
					"pl_param_last_modified_date": {
						"type": "String",
						"defaultValue": "1970-01-01T00:00:00Z"
					}
				},
				"folder": {
					"name": "testing_1"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-07T08:20:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AddColDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Rebrickable_Sink_CSV",
								"type": "DatasetReference"
							},
							"name": "ThemeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Rebrickable_Sink_CSV",
								"type": "DatasetReference"
							},
							"name": "ThemeSink"
						}
					],
					"transformations": [
						{
							"name": "AddLoadDateCol"
						}
					],
					"scriptLines": [
						"parameters{",
						"     fileName as string (toString(''))",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ThemeSource",
						"ThemeSource derive(load_date = currentDate()) ~> AddLoadDateCol",
						"AddLoadDateCol sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($fileName)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ThemeSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_paymentdetails')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Step2C"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_customer_csv",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "ds_Orders_csv",
								"type": "DatasetReference"
							},
							"name": "sourceOrders"
						},
						{
							"dataset": {
								"referenceName": "ds_Payments_csv",
								"type": "DatasetReference"
							},
							"name": "sourcePayments"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filterRelvantCustomerAge"
						},
						{
							"name": "filterRelavantPaymentStaus"
						},
						{
							"name": "selectCustomerData"
						},
						{
							"name": "selectPaymentData"
						},
						{
							"name": "joinOrdersCustomers"
						},
						{
							"name": "joinwithPayment"
						},
						{
							"name": "selectPaymentDetailsColumn"
						},
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          Customerslastname as string,",
						"          Customersfirstname as string,",
						"          CustomersCountry as string,",
						"          Customersage as short,",
						"          Customersgender as string,",
						"          Customersemail as string,",
						"          Customersprofession as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCustomer",
						"source(output(",
						"          order_id as string,",
						"          customer_id as string,",
						"          Store_id as string,",
						"          Date as date 'DD/mm/yyyy'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceOrders",
						"source(output(",
						"          order_id as string,",
						"          payment_id as string,",
						"          type as string,",
						"          descriptions as string,",
						"          pDate as date 'dd/MM/yyyy',",
						"          Status as string,",
						"          Details as string,",
						"          Total_Invoice as short,",
						"          Due_Amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcePayments",
						"sourceCustomer filter(Customersage >= 20 && Customersage < 71) ~> filterRelvantCustomerAge",
						"sourcePayments filter(Status != 'error' && (not(equals(Status, 'refunded')))) ~> filterRelavantPaymentStaus",
						"filterRelvantCustomerAge select(mapColumn(",
						"          Customer_ID = customer_id,",
						"          Customers_First_Name = Customersfirstname,",
						"          Customers_Last_Name = Customerslastname,",
						"          Customers_Country = CustomersCountry,",
						"          Customers_Age = Customersage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCustomerData",
						"filterRelavantPaymentStaus select(mapColumn(",
						"          order_id,",
						"          payment_id,",
						"          Status,",
						"          Total_Invoice,",
						"          Due_Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPaymentData",
						"sourceOrders, selectCustomerData join(sourceOrders@customer_id == selectCustomerData@Customer_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOrdersCustomers",
						"joinOrdersCustomers, sourcePayments join(sourceOrders@order_id == sourcePayments@order_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinwithPayment",
						"joinwithPayment select(mapColumn(",
						"          order_id = sourceOrders@order_id,",
						"          customer_id = sourceOrders@customer_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers_Country,",
						"          Customers_Age,",
						"          Status,",
						"          Total_Invoice,",
						"          Due_Amount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPaymentDetailsColumn",
						"selectPaymentDetailsColumn pivot(groupBy(order_id,",
						"          customer_id,",
						"          Date,",
						"          Customers_First_Name,",
						"          Customers_Last_Name,",
						"          Customers_Country,",
						"          Customers_Age,",
						"          Total_Invoice),",
						"     pivotBy(Status, ['received', 'not received']),",
						"     Due_Amount_ = sum(Due_Amount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PaymentDetails.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_dataflow_paymentdetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_paymentdetails",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_paymentdetails",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomer": {},
									"sourceOrders": {},
									"sourcePayments": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "step2C"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-13T05:35:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_paymentdetails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromHTTPToDL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HTTPToDL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetTempFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "DL_Rebrickable",
										"type": "LinkedServiceReference"
									},
									"path": "lego/errors/themes"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Rebrickable_Source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Rebrickable_Sink_CSV",
								"type": "DatasetReference",
								"parameters": {
									"fileSystem": {
										"value": "@pipeline().parameters.fileSystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.directory",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('tempFileName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "AddLoadDateCol",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "HTTPToDL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AddColDF",
								"type": "DataFlowReference",
								"parameters": {
									"fileName": {
										"value": "'@{pipeline().parameters.fileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ThemeSource": {
										"fileSystem": {
											"value": "@pipeline().parameters.fileSystem",
											"type": "Expression"
										},
										"directory": {
											"value": "@pipeline().parameters.directory",
											"type": "Expression"
										},
										"fileName": {
											"value": "@variables('tempFileName')",
											"type": "Expression"
										}
									},
									"ThemeSink": {
										"fileSystem": {
											"value": "@pipeline().parameters.fileSystem",
											"type": "Expression"
										},
										"directory": {
											"value": "@pipeline().parameters.directory",
											"type": "Expression"
										},
										"fileName": {
											"value": "@pipeline().parameters.fileName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteTempFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "AddLoadDateCol",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Rebrickable_Sink_CSV",
								"type": "DatasetReference",
								"parameters": {
									"fileSystem": {
										"value": "@pipeline().parameters.fileSystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.directory",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('tempFileName')",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "DL_Rebrickable",
									"type": "LinkedServiceReference"
								},
								"path": "lego/errors"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "SetTempFileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempFileName",
							"value": {
								"value": "@concat('temp',pipeline().parameters.fileName)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fileSystem": {
						"type": "string",
						"defaultValue": "lego"
					},
					"directory": {
						"type": "string",
						"defaultValue": "themes"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "themes.csv"
					}
				},
				"variables": {
					"tempFileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-08T02:42:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AddColDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "1_get_file_name_from_source_folder",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2025-01-15T03:29:00",
						"timeZone": "Myanmar Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/1_get_file_name_from_source_folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromDLToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CpyFromHTTPToDL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SetFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyFromHTTPToDL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileSystem": {
									"value": "@pipeline().parameters.fileSystem",
									"type": "Expression"
								},
								"directory": {
									"value": "@pipeline().parameters.directory",
									"type": "Expression"
								},
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetFileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat(pipeline().parameters.file,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckTableExist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupTableExist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('LookupTableExist').output.firstRow.res,1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "DropTable",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_Rebrickable",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "drop table @{pipeline().parameters.schemaName}.@{pipeline().parameters.tableName}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "LookupTableExist",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CpyFromHTTPToDL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "IF OBJECT_ID (N'@{pipeline().parameters.schemaName}.@{pipeline().parameters.tableName}',N'U') IS NOT NULL \n   SELECT 1 AS res ELSE SELECT 0 AS res;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Rebrickable_SQL_Sink",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.tableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "CopyFromDLToSQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CheckTableExist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"id"
									]
								},
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Rebrickable_Sink_CSV",
								"type": "DatasetReference",
								"parameters": {
									"fileSystem": {
										"value": "@pipeline().parameters.fileSystem",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.directory",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat(pipeline().parameters.file,'.csv')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Rebrickable_SQL_Sink",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName": {
										"value": "@pipeline().parameters.tableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schemaName": {
						"type": "string",
						"defaultValue": "test"
					},
					"tableName": {
						"type": "string",
						"defaultValue": "themes"
					},
					"fileSystem": {
						"type": "string",
						"defaultValue": "lego"
					},
					"directory": {
						"type": "string",
						"defaultValue": "themes"
					},
					"file": {
						"type": "string",
						"defaultValue": "themes"
					}
				},
				"variables": {
					"fileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-08T03:32:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromHTTPToDL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Files",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().globalParameters.fileList",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ExeCopyFromDLToSQL",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SetTableName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CopyFromDLToSQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"schemaName": {
												"value": "@pipeline().parameters.schemaName",
												"type": "Expression"
											},
											"tableName": {
												"value": "@variables('tableName')",
												"type": "Expression"
											},
											"fileSystem": {
												"value": "@pipeline().parameters.fileSystem",
												"type": "Expression"
											},
											"directory": {
												"value": "@variables('tableName')",
												"type": "Expression"
											},
											"file": {
												"value": "@variables('tableName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "SetTableName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tableName",
										"value": {
											"value": "@replace(item(), '.csv.gz', '')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"fileSystem": {
						"type": "string",
						"defaultValue": "lego"
					},
					"schemaName": {
						"type": "string",
						"defaultValue": "test"
					}
				},
				"variables": {
					"tableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-08T03:57:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromDLToSQL')]"
			]
		}
	]
}